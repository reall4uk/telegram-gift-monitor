#!/usr/bin/env python3
"""
Gift Detector Module - Flexible Version
Detects gifts based on keywords without strict structure requirements
"""

import re
import logging
from typing import Dict, Optional, List
from datetime import datetime
import hashlib

logger = logging.getLogger(__name__)


class GiftDetector:
    """Detects and extracts gift information from messages"""
    
    def __init__(self):
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
        self.gift_keywords = [
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
            'gift', 'gifts', 'new gift', 'appeared', 'limited', 'rare',
            'exclusive', 'special', 'unique', 'premium', 'vip',
            # –†—É—Å—Å–∫–∏–µ
            '–ø–æ–¥–∞—Ä–æ–∫', '–ø–æ–¥–∞—Ä–∫–∏', '–Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫', '–ø–æ—è–≤–∏–ª—Å—è', '—Ä–µ–¥–∫–∏–π',
            '—ç–∫—Å–∫–ª—é–∑–∏–≤', '–æ—Å–æ–±—ã–π', '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π', '–ø—Ä–µ–º–∏—É–º', '–≤–∏–ø',
            # –≠–º–æ–¥–∑–∏
            'üéÅ', 'üéÄ', 'üíé', 'üéØ', 'üåü', '‚≠ê', 'üî•', 'üí∞', 'üèÜ'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        self.limited_keywords = [
            'limited', 'rare', 'exclusive', 'special', 'unique', 'vip',
            '–ª–∏–º–∏—Ç', '—Ä–µ–¥–∫–∏–π', '—ç–∫—Å–∫–ª—é–∑–∏–≤', '–æ—Å–æ–±—ã–π', '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π', '–≤–∏–ø',
            'üî•', '‚ö°', 'üíé'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª (ID, —Ü–µ–Ω—ã –∏ —Ç.–¥.)
        self.number_patterns = [
            r'\b(\d{10,20})\b',  # –î–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ ID)
            r'(\d{1,3}(?:,\d{3})*)',  # –ß–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏ (—Ü–µ–Ω—ã)
            r'(\d+(?:\.\d+)?)',  # –û–±—ã—á–Ω—ã–µ —á–∏—Å–ª–∞
        ]
    
    def detect_gift(self, text: str) -> Optional[Dict]:
        """
        –ì–∏–±–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ None
        """
        if not text:
            return None
        
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        has_gift_keyword = any(keyword in text_lower for keyword in self.gift_keywords)
        
        if not has_gift_keyword:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        gift_id = self._generate_gift_id(text)
        
        gift_data = {
            'id': gift_id,
            'detected_at': datetime.utcnow().isoformat(),
            'is_limited': self._is_limited_gift(text_lower),
            'is_sold_out': self._is_sold_out(text_lower),
            'urgency_score': 0.5  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        numbers = self._extract_numbers(text)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É (–æ–±—ã—á–Ω–æ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç—ã–º–∏)
        price = self._guess_price(numbers, text)
        if price:
            gift_data['price'] = price
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏
        emoji = self._extract_emoji(text)
        if emoji:
            gift_data['emoji'] = emoji
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        availability = self._extract_availability(text)
        if availability:
            gift_data.update(availability)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º urgency –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        gift_data['urgency_score'] = self._calculate_urgency(gift_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        gift_data['description'] = text[:100] + '...' if len(text) > 100 else text
        
        logger.info(f"Detected gift: {gift_data}")
        return gift_data
    
    def _generate_gift_id(self, text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ò—â–µ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–≤–æ–∑–º–æ–∂–Ω—ã–µ ID)
        long_numbers = re.findall(r'\b(\d{10,20})\b', text)
        if long_numbers:
            return long_numbers[0]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–ª–∏–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–∑ —Ö—ç—à–∞
        timestamp = datetime.utcnow().strftime('%Y%m%d%H%M%S')
        text_hash = hashlib.md5(text.encode()).hexdigest()[:6]
        return f"{timestamp}{text_hash}"
    
    def _extract_numbers(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        numbers = []
        for pattern in self.number_patterns:
            matches = re.findall(pattern, text)
            numbers.extend(matches)
        return numbers
    
    def _guess_price(self, numbers: List[str], text: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª"""
        # –ò—â–µ–º —á–∏—Å–ª–∞ —Ä—è–¥–æ–º —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏ –æ —Ü–µ–Ω–µ
        price_indicators = ['‚≠ê', 'üåü', 'price', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost', '$', '‚ÇΩ']
        
        for indicator in price_indicators:
            # –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            pattern = rf'(\d+(?:,\d+)*)\s*{re.escape(indicator)}|{re.escape(indicator)}\s*(\d+(?:,\d+)*)'
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1) or match.group(2)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏, –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç—ã–º–∏
        numbers_with_commas = [n for n in numbers if ',' in n]
        if numbers_with_commas:
            return max(numbers_with_commas, key=lambda x: int(x.replace(',', '')))
        
        return None
    
    def _extract_availability(self, text: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        result = {}
        
        # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        percent_match = re.search(r'(\d+)\s*%', text)
        if percent_match:
            percent = int(percent_match.group(1))
            result['available_percent'] = percent
            
            # –ï—Å–ª–∏ 0%, –∑–Ω–∞—á–∏—Ç —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω
            if percent == 0:
                result['is_sold_out'] = True
        
        # –ò—â–µ–º –¥—Ä–æ–±–∏ —Ç–∏–ø–∞ 100/1000
        fraction_match = re.search(r'(\d+)\s*/\s*(\d+)', text)
        if fraction_match:
            current = int(fraction_match.group(1))
            total = int(fraction_match.group(2))
            result['available'] = total - current
            result['total'] = total
            if total > 0:
                result['available_percent'] = int((result['available'] / total) * 100)
        
        return result if result else None
    
    def _is_limited_gift(self, text_lower: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"""
        return any(keyword in text_lower for keyword in self.limited_keywords)
    
    def _is_sold_out(self, text_lower: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω –ª–∏ –ø–æ–¥–∞—Ä–æ–∫"""
        sold_out_keywords = [
            'sold out', '—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω', '–∑–∞–∫–æ–Ω—á–∏–ª—Å—è', '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
            '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'unavailable', '0%', 'ended'
        ]
        return any(keyword in text_lower for keyword in sold_out_keywords)
    
    def _extract_emoji(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏"""
        gift_emojis = ['üéÅ', 'üéÄ', 'üíé', 'üéØ', 'üåü', '‚≠ê', 'üî•', 'üí∞', 'üèÜ']
        
        for emoji in gift_emojis:
            if emoji in text:
                return emoji
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        return 'üéÅ'
    
    def _calculate_urgency(self, gift_data: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å (0-1)"""
        score = 0.3  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        
        # –†–∞—Å–ø—Ä–æ–¥–∞–Ω = –Ω–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if gift_data.get('is_sold_out'):
            return 0.0
        
        # –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π = –≤—ã—à–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        if gift_data.get('is_limited'):
            score += 0.3
        
        # –ù–∏–∑–∫–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å = –≤—ã—à–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        available_percent = gift_data.get('available_percent')
        if available_percent is not None:
            if available_percent < 10:
                score += 0.4
            elif available_percent < 25:
                score += 0.3
            elif available_percent < 50:
                score += 0.2
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
        return min(score, 1.0)
    
    def is_duplicate(self, gift_id: str, recent_gifts: List[str], 
                     time_window: int = 300) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç"""
        return gift_id in recent_gifts
    
    def format_notification_text(self, gift_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if gift_data.get('is_limited'):
            parts.append("üî• –õ–ò–ú–ò–¢–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–ê–†–û–ö! üî•")
        else:
            parts.append("üéÅ –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!")
        
        # –¶–µ–Ω–∞
        if gift_data.get('price'):
            parts.append(f"üíé –¶–µ–Ω–∞: {gift_data['price']} ‚≠êÔ∏è")
        
        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if gift_data.get('available_percent') is not None:
            parts.append(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {gift_data['available_percent']}%")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if gift_data.get('description'):
            parts.append(f"\n{gift_data['description']}")
        
    def _extract_marketplaces(self, text: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã"""
        marketplaces = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞: Getgems (https://t.me/...)
        pattern = r'(\w+)\s*\((https://t\.me/[\w/\?=]+)\)'
        matches = re.findall(pattern, text)
        
        for name, url in matches:
            marketplaces.append({
                'name': name,
                'url': url
            })
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
        direct_links = re.findall(r'https://t\.me/[\w/\?=]+', text)
        for link in direct_links:
            if not any(m['url'] == link for m in marketplaces):
                marketplaces.append({
                    'name': 'Telegram',
                    'url': link
                })
        
        return marketplaces
    
    def extract_gift_name(self, text: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞"""
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "gift" –∏–ª–∏ "–ø–æ–¥–∞—Ä–æ–∫"
        patterns = [
            r'(?:gift|–ø–æ–¥–∞—Ä–æ–∫)\s+[¬´"]([^¬ª"]+)[¬ª"]',
            r'(?:gift|–ø–æ–¥–∞—Ä–æ–∫):\s*([^\n.!]+)',
            r'(?:new|–Ω–æ–≤—ã–π)\s+([^\s]+)\s+(?:gift|–ø–æ–¥–∞—Ä–æ–∫)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1).strip()
        
        return None